// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	// Register a write operation to the master
	WriteRegister(ctx context.Context, in *WriteRegisterRequest, opts ...grpc.CallOption) (*WriteRegisterResponse, error)
	// Stream file content to the replica server (Phase 1 of 2PC)
	WritePrepare(ctx context.Context, opts ...grpc.CallOption) (FileService_WritePrepareClient, error)
	// Execute the write operation on the replica server (Phase 2 of 2PC)
	WriteEnd(ctx context.Context, in *WriteEndRequest, opts ...grpc.CallOption) (*WriteEndResponse, error)
	// Register a read operation to the master
	ReadAcquire(ctx context.Context, in *ReadAcquireRequest, opts ...grpc.CallOption) (*ReadAcquireResponse, error)
	// Stream file content from the replica server
	Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (FileService_ReadClient, error)
	// Stream file content from the replica server
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Update all file metadatas from master to the backups
	Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error)
	// Promote new master node which is sent by master
	Promote(ctx context.Context, in *PromoteRequest, opts ...grpc.CallOption) (*Empty, error)
	// Request a node to copy its replica to another node, this request is sent by master
	BackupFile(ctx context.Context, in *BackupFileRequest, opts ...grpc.CallOption) (*Empty, error)
	// Transfer a replica to the target node
	CopyReplica(ctx context.Context, opts ...grpc.CallOption) (FileService_CopyReplicaClient, error)
	// Self voting to be the new master
	Vote(ctx context.Context, in *VotingRequest, opts ...grpc.CallOption) (*VotingResponse, error)
	// Announce the new master role
	Announce(ctx context.Context, in *AnnouncementRequest, opts ...grpc.CallOption) (*Empty, error)
	// Query all file on file server.
	ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllFilesResponse, error)
	// Delete all files
	DeleteAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Locate file information of a given file on file server
	Locate(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) WriteRegister(ctx context.Context, in *WriteRegisterRequest, opts ...grpc.CallOption) (*WriteRegisterResponse, error) {
	out := new(WriteRegisterResponse)
	err := c.cc.Invoke(ctx, "/pb.FileService/WriteRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) WritePrepare(ctx context.Context, opts ...grpc.CallOption) (FileService_WritePrepareClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[0], "/pb.FileService/WritePrepare", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceWritePrepareClient{stream}
	return x, nil
}

type FileService_WritePrepareClient interface {
	Send(*WritePreparationRequest) error
	CloseAndRecv() (*WritePreparationResponse, error)
	grpc.ClientStream
}

type fileServiceWritePrepareClient struct {
	grpc.ClientStream
}

func (x *fileServiceWritePrepareClient) Send(m *WritePreparationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceWritePrepareClient) CloseAndRecv() (*WritePreparationResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WritePreparationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) WriteEnd(ctx context.Context, in *WriteEndRequest, opts ...grpc.CallOption) (*WriteEndResponse, error) {
	out := new(WriteEndResponse)
	err := c.cc.Invoke(ctx, "/pb.FileService/WriteEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ReadAcquire(ctx context.Context, in *ReadAcquireRequest, opts ...grpc.CallOption) (*ReadAcquireResponse, error) {
	out := new(ReadAcquireResponse)
	err := c.cc.Invoke(ctx, "/pb.FileService/ReadAcquire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Read(ctx context.Context, in *ReadRequest, opts ...grpc.CallOption) (FileService_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[1], "/pb.FileService/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FileService_ReadClient interface {
	Recv() (*ReadResponse, error)
	grpc.ClientStream
}

type fileServiceReadClient struct {
	grpc.ClientStream
}

func (x *fileServiceReadClient) Recv() (*ReadResponse, error) {
	m := new(ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/pb.FileService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Backup(ctx context.Context, in *BackupRequest, opts ...grpc.CallOption) (*BackupResponse, error) {
	out := new(BackupResponse)
	err := c.cc.Invoke(ctx, "/pb.FileService/Backup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Promote(ctx context.Context, in *PromoteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FileService/Promote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) BackupFile(ctx context.Context, in *BackupFileRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FileService/BackupFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CopyReplica(ctx context.Context, opts ...grpc.CallOption) (FileService_CopyReplicaClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileService_ServiceDesc.Streams[2], "/pb.FileService/CopyReplica", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServiceCopyReplicaClient{stream}
	return x, nil
}

type FileService_CopyReplicaClient interface {
	Send(*CopyReplicaRequest) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type fileServiceCopyReplicaClient struct {
	grpc.ClientStream
}

func (x *fileServiceCopyReplicaClient) Send(m *CopyReplicaRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServiceCopyReplicaClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fileServiceClient) Vote(ctx context.Context, in *VotingRequest, opts ...grpc.CallOption) (*VotingResponse, error) {
	out := new(VotingResponse)
	err := c.cc.Invoke(ctx, "/pb.FileService/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Announce(ctx context.Context, in *AnnouncementRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FileService/Announce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ListAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllFilesResponse, error) {
	out := new(AllFilesResponse)
	err := c.cc.Invoke(ctx, "/pb.FileService/ListAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.FileService/DeleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Locate(ctx context.Context, in *LocateRequest, opts ...grpc.CallOption) (*LocateResponse, error) {
	out := new(LocateResponse)
	err := c.cc.Invoke(ctx, "/pb.FileService/Locate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility
type FileServiceServer interface {
	// Register a write operation to the master
	WriteRegister(context.Context, *WriteRegisterRequest) (*WriteRegisterResponse, error)
	// Stream file content to the replica server (Phase 1 of 2PC)
	WritePrepare(FileService_WritePrepareServer) error
	// Execute the write operation on the replica server (Phase 2 of 2PC)
	WriteEnd(context.Context, *WriteEndRequest) (*WriteEndResponse, error)
	// Register a read operation to the master
	ReadAcquire(context.Context, *ReadAcquireRequest) (*ReadAcquireResponse, error)
	// Stream file content from the replica server
	Read(*ReadRequest, FileService_ReadServer) error
	// Stream file content from the replica server
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Update all file metadatas from master to the backups
	Backup(context.Context, *BackupRequest) (*BackupResponse, error)
	// Promote new master node which is sent by master
	Promote(context.Context, *PromoteRequest) (*Empty, error)
	// Request a node to copy its replica to another node, this request is sent by master
	BackupFile(context.Context, *BackupFileRequest) (*Empty, error)
	// Transfer a replica to the target node
	CopyReplica(FileService_CopyReplicaServer) error
	// Self voting to be the new master
	Vote(context.Context, *VotingRequest) (*VotingResponse, error)
	// Announce the new master role
	Announce(context.Context, *AnnouncementRequest) (*Empty, error)
	// Query all file on file server.
	ListAll(context.Context, *Empty) (*AllFilesResponse, error)
	// Delete all files
	DeleteAll(context.Context, *Empty) (*Empty, error)
	// Locate file information of a given file on file server
	Locate(context.Context, *LocateRequest) (*LocateResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileServiceServer struct {
}

func (UnimplementedFileServiceServer) WriteRegister(context.Context, *WriteRegisterRequest) (*WriteRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRegister not implemented")
}
func (UnimplementedFileServiceServer) WritePrepare(FileService_WritePrepareServer) error {
	return status.Errorf(codes.Unimplemented, "method WritePrepare not implemented")
}
func (UnimplementedFileServiceServer) WriteEnd(context.Context, *WriteEndRequest) (*WriteEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteEnd not implemented")
}
func (UnimplementedFileServiceServer) ReadAcquire(context.Context, *ReadAcquireRequest) (*ReadAcquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAcquire not implemented")
}
func (UnimplementedFileServiceServer) Read(*ReadRequest, FileService_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedFileServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFileServiceServer) Backup(context.Context, *BackupRequest) (*BackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Backup not implemented")
}
func (UnimplementedFileServiceServer) Promote(context.Context, *PromoteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Promote not implemented")
}
func (UnimplementedFileServiceServer) BackupFile(context.Context, *BackupFileRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupFile not implemented")
}
func (UnimplementedFileServiceServer) CopyReplica(FileService_CopyReplicaServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyReplica not implemented")
}
func (UnimplementedFileServiceServer) Vote(context.Context, *VotingRequest) (*VotingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (UnimplementedFileServiceServer) Announce(context.Context, *AnnouncementRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Announce not implemented")
}
func (UnimplementedFileServiceServer) ListAll(context.Context, *Empty) (*AllFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAll not implemented")
}
func (UnimplementedFileServiceServer) DeleteAll(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (UnimplementedFileServiceServer) Locate(context.Context, *LocateRequest) (*LocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Locate not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_WriteRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).WriteRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/WriteRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).WriteRegister(ctx, req.(*WriteRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_WritePrepare_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).WritePrepare(&fileServiceWritePrepareServer{stream})
}

type FileService_WritePrepareServer interface {
	SendAndClose(*WritePreparationResponse) error
	Recv() (*WritePreparationRequest, error)
	grpc.ServerStream
}

type fileServiceWritePrepareServer struct {
	grpc.ServerStream
}

func (x *fileServiceWritePrepareServer) SendAndClose(m *WritePreparationResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceWritePrepareServer) Recv() (*WritePreparationRequest, error) {
	m := new(WritePreparationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_WriteEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).WriteEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/WriteEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).WriteEnd(ctx, req.(*WriteEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ReadAcquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAcquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ReadAcquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/ReadAcquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ReadAcquire(ctx, req.(*ReadAcquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FileServiceServer).Read(m, &fileServiceReadServer{stream})
}

type FileService_ReadServer interface {
	Send(*ReadResponse) error
	grpc.ServerStream
}

type fileServiceReadServer struct {
	grpc.ServerStream
}

func (x *fileServiceReadServer) Send(m *ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Backup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Backup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/Backup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Backup(ctx, req.(*BackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Promote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Promote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/Promote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Promote(ctx, req.(*PromoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_BackupFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).BackupFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/BackupFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).BackupFile(ctx, req.(*BackupFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CopyReplica_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServiceServer).CopyReplica(&fileServiceCopyReplicaServer{stream})
}

type FileService_CopyReplicaServer interface {
	SendAndClose(*Empty) error
	Recv() (*CopyReplicaRequest, error)
	grpc.ServerStream
}

type fileServiceCopyReplicaServer struct {
	grpc.ServerStream
}

func (x *fileServiceCopyReplicaServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServiceCopyReplicaServer) Recv() (*CopyReplicaRequest, error) {
	m := new(CopyReplicaRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FileService_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VotingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Vote(ctx, req.(*VotingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Announce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnouncementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Announce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/Announce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Announce(ctx, req.(*AnnouncementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ListAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ListAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/ListAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ListAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Locate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Locate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.FileService/Locate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Locate(ctx, req.(*LocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WriteRegister",
			Handler:    _FileService_WriteRegister_Handler,
		},
		{
			MethodName: "WriteEnd",
			Handler:    _FileService_WriteEnd_Handler,
		},
		{
			MethodName: "ReadAcquire",
			Handler:    _FileService_ReadAcquire_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FileService_Delete_Handler,
		},
		{
			MethodName: "Backup",
			Handler:    _FileService_Backup_Handler,
		},
		{
			MethodName: "Promote",
			Handler:    _FileService_Promote_Handler,
		},
		{
			MethodName: "BackupFile",
			Handler:    _FileService_BackupFile_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _FileService_Vote_Handler,
		},
		{
			MethodName: "Announce",
			Handler:    _FileService_Announce_Handler,
		},
		{
			MethodName: "ListAll",
			Handler:    _FileService_ListAll_Handler,
		},
		{
			MethodName: "DeleteAll",
			Handler:    _FileService_DeleteAll_Handler,
		},
		{
			MethodName: "Locate",
			Handler:    _FileService_Locate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WritePrepare",
			Handler:       _FileService_WritePrepare_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _FileService_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CopyReplica",
			Handler:       _FileService_CopyReplica_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}
