// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.0
// source: membership.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MemberShipServiceClient is the client API for MemberShipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MemberShipServiceClient interface {
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error)
}

type memberShipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberShipServiceClient(cc grpc.ClientConnInterface) MemberShipServiceClient {
	return &memberShipServiceClient{cc}
}

func (c *memberShipServiceClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/pb.MemberShipService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberShipServiceClient) Leave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*LeaveResponse, error) {
	out := new(LeaveResponse)
	err := c.cc.Invoke(ctx, "/pb.MemberShipService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberShipServiceServer is the server API for MemberShipService service.
// All implementations must embed UnimplementedMemberShipServiceServer
// for forward compatibility
type MemberShipServiceServer interface {
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	Leave(context.Context, *LeaveRequest) (*LeaveResponse, error)
	mustEmbedUnimplementedMemberShipServiceServer()
}

// UnimplementedMemberShipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMemberShipServiceServer struct {
}

func (UnimplementedMemberShipServiceServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedMemberShipServiceServer) Leave(context.Context, *LeaveRequest) (*LeaveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedMemberShipServiceServer) mustEmbedUnimplementedMemberShipServiceServer() {}

// UnsafeMemberShipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberShipServiceServer will
// result in compilation errors.
type UnsafeMemberShipServiceServer interface {
	mustEmbedUnimplementedMemberShipServiceServer()
}

func RegisterMemberShipServiceServer(s grpc.ServiceRegistrar, srv MemberShipServiceServer) {
	s.RegisterService(&MemberShipService_ServiceDesc, srv)
}

func _MemberShipService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberShipServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MemberShipService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberShipServiceServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberShipService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberShipServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.MemberShipService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberShipServiceServer).Leave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberShipService_ServiceDesc is the grpc.ServiceDesc for MemberShipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberShipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.MemberShipService",
	HandlerType: (*MemberShipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _MemberShipService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _MemberShipService_Leave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "membership.proto",
}
